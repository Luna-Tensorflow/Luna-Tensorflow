import Std.Base
import Std.Foreign
import Std.Foreign.C.Value
import Tensorflow.Tensor
import Tensorflow.Operations

def checkTensor:
    print "checkTensor"
    print (0.upto 10)
    t = tensorFromList [1.0, 2.0, 3.0]
    print t.length
    print t.toJSON
    None

def checkDerivative:
    print "checkDerivative"
    a = constFromScalar 5.0
    c = (a * a) * a
    d = partial c a
    print d.toJSON
    None

def checkOp:
    print "checkOp"
    a = constFromScalar 2.0
    b = constFromScalar 3.0
    c = a + b
    print c.toJSON
    c2 = a - b
    print c2.toJSON
    None

def checkAdd:
    print "checkAdd:"
    number = 42
    print ("number: " + number.toText)

    add1 = lookupSymbol "TFL" "add1"
    cResult = add1.call CInt32 [CInt32.fromInt(number).toCArg]
    result = cResult.toInt
    print ("number + 1: " + result.toText)
    None

def checkLifetime:
    print "checkLifeTime:"
    number = 3
    print ("number: " + number.toText)

    getPtr = lookupSymbol "TFL" "getPtr"
    ptr = getPtr.call (Pointer CInt32) [CInt32.fromInt(number).toCArg]

    releaseMethod = lookupSymbol "TFL" "release"
    managedPtr = ManagedPointer None . fromPointer releaseMethod ptr

    getValue = lookupSymbol "TFL" "getValue"

    cVal = getValue.call CInt32 [managedPtr.toCArg]
    val = cVal.toInt
    print ("restored value: " + val.toText)
    None

def checkTensorPtr:
    print "checkTensorPtr"
    values = [1.1, 2.5, 3.7, 4.3]
    print ("values: " + values.toText)
    cvalues = values.map x: CFloat.fromReal x

    makeFloatTensor = lookupSymbol "TFL" "make_float_tensor"
    tensor = makeFloatTensor.call (Pointer None) [Array CFloat . fromList cvalues . toCArg, CInt64.fromInt cvalues.length . toCArg]

    releaseMethod = lookupSymbol "TFL" "release"
    managedTensor = ManagedPointer None . fromPointer releaseMethod tensor

    index = 3
    getTensor1dFloatValueAt = lookupSymbol "TFL" "get_tensor1d_float_value_at"
    cTensorAt3 = getTensor1dFloatValueAt.call CFloat [managedTensor.toCArg, CInt64.fromInt index . toCArg]
    tensorAt3 = cTensorAt3.toReal
    print ("tensor.at({3}): " + tensorAt3.toText)
    None

def main:
    checkTensor
    checkDerivative
    checkOp
    checkAdd
    checkLifetime
    checkTensorPtr
    None
