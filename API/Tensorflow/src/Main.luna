import Std.Base
import Std.Time

import Tensorflow.Lift
import Tensorflow.Operations
import Tensorflow.Tensor
import Tensorflow.Gradient
import Tensorflow.Types

def step func (x, y) [a, b]:
    func x y a b

def gradientDescent lr x y a b:
    diff'' = a*x
    diff'  = diff'' + b
    diff   = diff' - y

    meanSqErr = diff * diff
    pa'' = partial meanSqErr a
    pb'' = partial meanSqErr b

    pa'  = pa'' * lr
    pb'  = pb'' * lr

    pa = a + pa'
    pb = b + pb'

    [pa, pb]

def testRegression:
    print "Regression"
    xtensors = [-49,-32,46,-12,18,40,24,29,18,24,12,-41,-39,-24,45,30,-6,-27,-20,21,0,25,14,-11,-22,9,46,-7,-37,-34,-18,-7,30,-10,44,11,36,35,19,24,-29,-28,23,-16,13,-1,21,6,-24,20].each (x: tensorFromList1d FloatType [x.toReal])
    ytensors = [-623,-416,521,-176,186,448,253,318,180,254,112,-524,-500,-321,505,330,-107,-359,-273,220,-30,267,133,-167,-297,76,519,-117,-475,-444,-252,-119,324,-152,492,101,397,387,192,255,-384,-370,246,-226,123,-45,222,37,-321,209].each (x: tensorFromList1d FloatType [x.toReal])

    train = xtensors . zip ytensors

    lifted = lift5 gradientDescent

    zero = tensorFromList1d FloatType [0.0]
    lr = tensorFromList1d FloatType [(0.0001 . negate)]

    t0 = Time.now
    [a, b] = train . fold [zero, zero] (step (lifted lr))
    t1 = Time.now

    print a.toJSON
    print b.toJSON
    print ("Took " + (t1.diff t0).toText + " ms")
    if ((a.toJSON.toText == "[12.209929466247559]").and $ b.toJSON.toText == "[-0.22048871219158173]").not then throw $ "Regression fail: expected a = [12.209929466247559], b = [-0.22048871219158173], got a = " + a.toJSON.toText + ", b = " + b.toJSON.toText else None
    print "Regression OK"
    print ""
    print ""
    None

def testGradients:
    print "Gradients"
    a = constFromScalar FloatType 3.0
    b = constFromScalar FloatType 3.0
    q = constFromScalar FloatType 2.0
    p = constFromScalar FloatType 2.0.negate
    c = a * b
    d = c * a
    e = a + b
    gs = gradients [d, e] [a, b] [p, q]
    result = gs.toJSON
    print result
    if (result == [[34.0.negate], [16.0.negate]].toJSON).not then throw $ "Gradients error: expected [[-34],[-16]], got " + result.toText else None
    print "Gradients OK"
    print ""
    print ""
    None

def testUInt8:
    print "UInt8"
    a = constFromScalar UInt8Type 250
    b = constFromScalar UInt8Type 10
    c = add a b
    print a.toJSON
    print "+"
    print b.toJSON
    print "="
    cVal = c.toJSON
    print cVal
    if (cVal.toText == "[4]").not then throw $ "UInt8 error: expected [4], got " + cVal.toText else None
    print "UInt8 OK"
    print ""
    print ""

def testBool:
    print "Bool"
    a = constFromScalar BoolType True
    aVal = a.toJSON
    print aVal
    if (aVal.toText == "[true]").not then throw $ "Bool error: expected [true], got " + aVal.toText else None
    print "Bool OK"
    print ""
    print ""

def testMultidimensionalTensors:
    print "Multidimensional tensors"
    aTensor = tensorFromList Int64Type [2, 3] [1, 2, 3, 4, 5, 6]
    aJSON = aTensor.toJSON
    print aJSON
    if (aJSON.toText == "[1,2,3,4,5,6]").not then throw $ "Multidimensional tensor error: expected [1,2,3,4,5,6], got " + aJSON.toText else None

    aTensor12 = aTensor.at [1, 2]
    print aTensor12
    if (aTensor12 == 6).not then throw "Multidimensional tensor error: expected 6, got " + aTensor12.toText else None

    bTensor = tensorFromList Int64Type [2, 3] [9, 8, 7, 7, 8, 9]
    bJSON = bTensor.toJSON
    print bJSON
    if (bJSON.toText == "[9,8,7,7,8,9]").not then throw $ "Multidimensional tensor error: expected [9,8,7,7,8,9], got " + bJSON.toText else None

    a = makeConst aTensor
    b = makeConst bTensor
    c = a + b
    cVal = c.eval
    print cVal.dims
    if (cVal.dims == [2, 3]).not then throw $ "Multidimensional tensor error: expected [2, 3], got " + cVal.dims.toText else None

    cJSON = cVal.toJSON
    print cJSON
    if (cJSON.toText == "[10,10,10,11,13,15]").not then throw $ "Multidimensional tensor error: expected [10,10,10,11,13,15], got " + cJSON.toText else None

    print "Multidimensional tensor OK"
    print ""
    print ""

def main:
    testRegression
    testUInt8
    testBool
    testGradients
    testMultidimensionalTensors