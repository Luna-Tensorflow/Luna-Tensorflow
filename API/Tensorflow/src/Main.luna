import Std.Base
import Std.Time

import Tensorflow.Lift
import Tensorflow.Operations
import Tensorflow.Tensor
import Tensorflow.Gradient
import Tensorflow.Types
import Tensorflow.Graph

def forwardStep (weight, bias) layer:
    prod = matMul weight layer
    nextLayer = add prod bias
    nextLayerActivated = tanh nextLayer
    nextLayerActivated

def forward input weights biases:
    layers = weights . zip biases
    netOutput = layers.fold input forwardStep
    netOutput

def backward lr weights biases diff:
    wGrads = gradients diff weights []
    wNew = (weights.zip wGrads).each((w, g): w - lr * g)

    bGrads = gradients diff biases []
    bNew = (biases.zip bGrads).each((b, g): b - lr * g)
    [wNew, bNew]

def neuralNetwork lr in weights biases out: 
    netOutput = forward in weights biases
    diff' = netOutput - out
    diff = diff * diff
    new = backward lr weights biases diff
    new

def liftNet fun layercount:
    lr = makePlaceholder FloatType "lr"
    in = makePlaceholder FloatType "in"

    weights = (1.upto layercount).each (x: makePlaceholder FloatType ("w" + x.toText))

    biases = (1.upto layercount).each (x: makePlaceholder FloatType ("b" + x.toText))

    out = makePlaceholder FloatType "out"

    result = fun lr in weights biases out
    graph = makeGraphFromOutputList result

    def liftedNet lr in w b out:
        weights = ((1.upto layercount) . zip w).each((i, t): ("w" + i.toText, t))
        biases = ((1.upto layercount) . zip b).each((i, t): ("b" + i.toText, t))

        params = [("lr", lr), ("in", in), ("out", out)]
        inputs = params + weights + biases
        res = graph . evalSubsts inputs
        res
    liftedNet

def step func (input, output) [weights, biases]:
    func input weights biases output

def sianko:
    tensor1 = randomTensor FloatType [2, 3] (1.0 . negate) 1.0
    tensor2 = randomTensor FloatType [3, 20] (1.0 . negate) 1.0
    print tensor1.toJSON
    print tensor2.toJSON
    def matMul' a b:
        x = matMul a b
        [x]
    lifted = lift2 matMul'
    tensor3 = lifted tensor1 tensor2
    print tensor3.toJSON
    
def main:
    print "Classification"

    xValues = [0.40217346868349846, 0.3277419251425864, 0.8724729303385044, 0.8897825035899187, 0.9796188749741762, 0.7071019631116182, 0.5027699712943916, 0.8410354310072834, 0.37423438516452323, 0.30315898494179416, 0.500712201294488, 0.20282920088572065, 0.12574385409881206, 0.951965555266773, 0.09966070979142583, 0.3467844401097815, 0.39655854006867064, 0.6892856855764523, 0.823644760824153, 0.12702164874400934]

    yValues = [0.5213346373852332, 0.3070805651378441, 0.9805103551686634, 0.25309586773255044, 0.23423684611482032, 0.7080247433000999, 0.36607704941260666, 0.27038798824466126, 0.39576019264559403, 0.27996211368289725, 0.27772628856375614, 0.7286980755907009, 0.19588733975413697, 0.8967179308067383, 0.7342176878095072, 0.9242946056218853, 0.8908233966156088, 0.9734959153301433, 0.31985891617892037, 0.058583433450159705]

    inputsZipped = xValues.zip yValues

    inputs = inputsZipped.each ((x, y): tensorFromList FloatType [2, 1] [x, y])

    outs = [1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0].each (x: tensorFromList FloatType [1, 1] [x.toReal])

    train = inputs.zip outs

    print "Dataset:"
    print train.toJSON

    lr = tensorFromList1d FloatType [(0.001.negate)]

    wInitial = [
        randomTensor FloatType [3, 2] (1.0 . negate) 1.0,
        randomTensor FloatType [3, 3] (1.0 . negate) 1.0,
        randomTensor FloatType [1, 3] (1.0 . negate) 1.0]

    bInitial = [
        randomTensor FloatType [3, 1] (1.0 . negate) 1.0,
        randomTensor FloatType [3, 1] (1.0 . negate) 1.0,
        randomTensor FloatType [1, 1] (1.0 . negate) 1.0]

    lifted = liftNet neuralNetwork 3

    print "Weights:"
    print wInitial.toJSON
    print "Biases:"
    print bInitial.toJSON

    data = train.head.get

    a = step (lifted lr) data [wInitial, bInitial]
    print a.toJSON 

def siamko2:
    [wTrained, bTrained] = train . fold [wInitial, bInitial] (step (lifted lr))

    print wTrained.toJSON
    print bTrained.toJSON

    None
