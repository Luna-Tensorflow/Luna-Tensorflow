import Std.Base
import Std.Time
import Std.Foreign
import Std.Foreign.C.Value
import Tensorflow.Tensor
import Tensorflow.Operations
import Tensorflow.Graph
import Tensorflow.CWrappers.Operations

def step graph (x, y) [a, b]:
    (graph . evalSubsts [("a", a), ("b", b), ("x", x), ("y", y)]) . each (el: el . at 0)

def multiList list n acc:
    if n==0 then acc else multiList list (n-1) (acc+list)

def main:
    print "Regression"
    xs = [-49,-32,46,-12,18,40,24,29,18,24,12,-41,-39,-24,45,30,-6,-27,-20,21,0,25,14,-11,-22,9,46,-7,-37,-34,-18,-7,30,-10,44,11,36,35,19,24,-29,-28,23,-16,13,-1,21,6,-24,20].map x: x.toReal
    ys = [-623,-416,521,-176,186,448,253,318,180,254,112,-524,-500,-321,505,330,-107,-359,-273,220,-30,267,133,-167,-297,76,519,-117,-475,-444,-252,-119,324,-152,492,101,397,387,192,255,-384,-370,246,-226,123,-45,222,37,-321,209].map x: x.toReal

    train = xs . zip ys

    lr = constFromScalar (0.0001 . negate)

    xph = makePlaceholder "x"
    yph = makePlaceholder "y"

    aph = makePlaceholder "a"
    bph = makePlaceholder "b"

    diff'' = aph * xph
    diff' = diff'' + bph
    diff = diff' - yph
    meanYerrSq = diff * diff
    pa'' = partial meanYerrSq aph
    pb'' = partial meanYerrSq bph

    pa' = pa'' * lr
    pb' = pb'' * lr

    pa = aph + pa'
    pb = bph + pb'

    graph = makeGraphFromOutputList [pa, pb]

    t0 = Time.now
    abList = train . fold [0.0, 0.0] (step graph)
    t1 = Time.now

    print abList.toJSON
    print ("Took " + (t1.diff t0).toText + " ms")
    None
