import Std.Foreign
import Std.Foreign.C.Value
import Tensorflow.Types

import Tensorflow.CWrappers.Helpers

class TensorWrapper a:
    ptr :: ManagedPointer None
    typetag :: a

    def toCArg:
        self.ptr.toCArg

    def numDims:
        res = callHandlingError "get_tensor_num_dims" CInt64 [self.toCArg]

        res.toInt

    def dims:
        n = self.numDims

        dimsPtr = callHandlingError "get_tensor_dims" (Pointer CInt64) [self.toCArg]
        dimsArr = Array CInt64 . make n dimsPtr
        cdims = dimsArr.toList
        dims = cdims.each (i: i.toInt)
        callHandlingError "free_pointer" None [dimsPtr.toCArg]

        dims

    def at indexes:
        cindexes = indexes.map CInt64.fromInt

        ret = Array CInt64 . with cindexes cindexesArr:
                res = callHandlingError ("get_tensor_value_at_" + self.typetag.typename) (self.typetag.ctype) [self.toCArg,
                        cindexesArr . toCArg, CInt64.fromInt cindexes.length . toCArg]
                ret = self.typetag.fromC res
                self.typetag.cleanupC res
                ret
        ret

    def atIndex index:
        res = callHandlingError ("get_tensor_value_at_index_" + self.typetag.typename) (self.typetag.ctype) [self.toCArg,
                CInt64.fromInt index . toCArg]
        ret = self.typetag.fromC res
        self.typetag.cleanupC res
        ret

    def flatLength:
        res = callHandlingError "get_tensor_flatlist_length" CInt64 [self.toCArg]
        res.toInt

    def toFlatList:
        len = self.flatLength

        ptr = callHandlingError ("tensor_to_flatlist_" + self.typetag.typename) (Pointer (self.typetag.ctype)) [self.toCArg]
        arr = Array (self.typetag.ctype) . make len ptr
        clist = arr.toList
        list = clist.each (self.typetag.fromC)
        clist.each (self.typetag.cleanupC)
        callHandlingError "free_pointer" None [ptr.toCArg]

        list

def createTensorWrapper typetag dims values:
    expectedValuesCount = dims.foldLeft 1 (x: a: a * x)
    if (values.length == expectedValuesCount).not then throw ("values (" + values.length.toText + ") must be exactly of the size needed to fill a tensor with dimensions " + dims.toText) else None

    cvalues = values.each typetag.toC
    tensor = Array typetag.ctype . with cvalues cvaluesArray:
            cdims = dims.map CInt64.fromInt
            Array CInt64 . with cdims cdimsArray:
                    callHandlingError "make_tensor" (Pointer None) [cvaluesArray.toCArg, CInt32.fromInt typetag.num . toCArg,
                            cdimsArray.toCArg, CInt64.fromInt cdims.length . toCArg]
    cvalues.each typetag.cleanupLuna

    managedTensor = ManagedPointer None . fromPointer releaseMethod tensor
    TensorWrapper managedTensor typetag

def createRandomTensorWrapper typetag dims minValue maxValue:
    minCVal = typetag.toC minValue
    maxCVal = typetag.toC maxValue

    cdims = dims.map CInt64.fromInt
    tensor = Array CInt64 . with cdims cdimsArray:
            callHandlingError ("make_random_tensor_" + typetag.typename) (Pointer None) [cdimsArray.toCArg,
                    CInt64.fromInt cdims.length . toCArg, minCVal . toCArg, maxCVal . toCArg]

    managedTensor = ManagedPointer None . fromPointer releaseMethod tensor
    TensorWrapper managedTensor typetag

def createConstTensorWrapper typetag dims value:
    cVal = typetag.toC value

    cdims = dims.map CInt64.fromInt
    tensor = Array CInt64 . with cdims cdimsArray:
            callHandlingError ("make_const_tensor_" + typetag.typename) (Pointer None) [cdimsArray.toCArg,
                    CInt64.fromInt cdims.length . toCArg, cVal . toCArg]

    managedTensor = ManagedPointer None . fromPointer releaseMethod tensor
    TensorWrapper managedTensor typetag

def saveTensorsWrapper filename tensorPtrs:
    tensors' = tensorPtrs.each id
    count = tensors'.length

    valsArr = Pointer (Pointer None) . mallocElems count
    indexed = 0 . upto (count - 1) . zip tensors'

    indexed . each (idx, elem):
      valsArr . moveElems idx . write (elem.ptr)

    CString.with filename fnamecstr:
            callHandlingError "save_tensors_to_file" None [fnamecstr.toCArg, valsArr.toCArg, (CInt64.fromInt count).toCArg]

    valsArr.free

def loadTensorsWrapper filename count:
    returnedPtr = CString.with filename fnamecstr:
            callHandlingError "load_tensors_from_file" (Pointer (Pointer None)) [fnamecstr.toCArg, (CInt64.fromInt count).toCArg]
    returnedArr = Array (Pointer None) . make count returnedPtr

    managed = returnedArr.toList.each (ManagedPointer None . fromPointer releaseMethod)
    callHandlingError "free_pointer" None [returnedPtr.toCArg]
    managed

def fromPngDirWrappers dirname:
    returnedPtr = CString.with dirname dirnamecstr:
            callHandlingError "read_tensor_arr_from_png_directory" (Pointer (Pointer None)) [dirnamecstr.toCArg]

    countC = CString.with dirname dirnamecstr:
            callHandlingError "png_files_in_directory_count" CInt32 [dirnamecstr.toCArg]

    count = countC.toInt
    returnedArr = Array (Pointer None) . make count returnedPtr

    managed = returnedArr.toList.each (ManagedPointer None . fromPointer releaseMethod)
    callHandlingError "free_pointer" None [returnedPtr.toCArg]
    managed



def fromPngWrapper filename:
    returnedPtr = CString.with filename fnamecstr:
            callHandlingError "read_tensor_from_png" (Pointer None) [fnamecstr.toCArg]

    managed = ManagedPointer None . fromPointer releaseMethod returnedPtr
    TensorWrapper managed FloatType
