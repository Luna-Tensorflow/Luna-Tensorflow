import Std.Foreign.C.Value
import Std.Foreign

import Tensorflow.CWrappers.Tensor

import Tensorflow.CWrappers.Helpers

def unzip listpair: case listpair of
    Empty: (Empty, Empty)
    Prepend (x,y) tail: case unzip tail of
        (tailx, taily): ((Prepend x tailx), (Prepend y taily))

class StateWrapper:
    ptr :: ManagedPointer None

    def toCArg:
        self.ptr.toCArg

    def values names:
        count = names . length

        varNameArr = Pointer CString . mallocElems count
        indexed = 0 . upto count . zip names
        indexed . each (idx, elem):
            varNameArr . moveElems idx . write (CString . fromText elem)

        returnedPtr = callHandlingError "get_values_from_state" (Pointer (Pointer None)) [self.toCArg,
                varNameArr.toCArg, (CInt64.fromInt count).toCArg]

        returnedArr = Array (Pointer None) . make count returnedPtr

        managed = returnedArr.toList.each (ManagedPointer None . fromPointer releaseMethod)
        retval = managed.each (ptr: TensorWrapper ptr)

        callHandlingError "free_pointer" None [returnedPtr.toCArg]

        0.upto (count - 1) . each (idx: varNameArr . moveElems idx . read . free)
        varNameArr.free

        retval

    def value name:

        retptr = CString.with name nameCStr:
                callHandlingError "get_value_from_state" (Pointer None) [self.toCArg, nameCStr.toCArg]
        managed = ManagedPointer None . fromPointer releaseMethod retptr
        TensorWrapper managed

    def update values:
        values' = values.each id
        (valnames, vals) = unzip values'
        ptrs = vals.each v: v.ptr

        res = self.updatePtrs valnames ptrs
        res

    def updatePtrs valnames ptrs:
        vals = ptrs.each id
        count = vals . length

        varNameArr = Pointer CString . mallocElems count
        indexed = 0 . upto (count - 1) . zip valnames
        indexed . each (idx, elem):
            varNameArr . moveElems idx . write (CString . fromText elem)

        valsArr = Pointer (Pointer None) . mallocElems count
        indexed = 0 . upto (count - 1) . zip vals
        indexed . each (idx, elem):
            valsArr . moveElems idx . write elem.ptr

        newstatePtr = callHandlingError "update_state" (Pointer None) [self.toCArg,
                varNameArr.toCArg, valsArr.toCArg, (CInt64.fromInt count).toCArg]

        0.upto (count - 1) . each (idx: varNameArr . moveElems idx . read . free)
        varNameArr.free
        valsArr.free

        managed = ManagedPointer None . fromPointer releaseMethod newstatePtr
        StateWrapper managed


def emptyState:
    ptr = callHandlingError "make_empty_state" (Pointer None) []
    managed = ManagedPointer None . fromPointer releaseMethod ptr
    StateWrapper managed

# saveVarsFromState :: Text -> List Variable -> StateWrapper -> ()
def saveVarsFromStateWrapper fname vars stateWrapper:
    "First fetch vars from the state"
    vars' = vars.each id
    state' = stateWrapper
    count = vars'.length

    valsArr = Pointer (Pointer None) . mallocElems count
    indexed = 0 . upto (count - 1) . zip vars'
    indexed . each (idx, elem):
        valsArr . moveElems idx . write (elem.ptr.ptr)

    returnedPtr = callHandlingError "get_variable_values_from_state" (Pointer (Pointer None)) [state'.toCArg, 
        valsArr.toCArg, (CInt64.fromInt count).toCArg]

    returnedArr = Array (Pointer None) . make count returnedPtr

    managedTensors = returnedArr.toList.each (ManagedPointer None . fromPointer releaseMethod)

    callHandlingError "free_pointer" None [returnedPtr.toCArg]

    valsArr.free

    "Now, save the tensors"
    saveTensorsWrapper fname managedTensors

# loadVarsToStateWrapper :: Text -> List Variable -> StateWrapper
def loadVarsToStateWrapper fname vars:
    varnames = vars.each (v: v.wrapper.opName)
    count = vars.length
    tensorptrs = loadTensorsWrapper fname count
    st = emptyState
    st' = st.updatePtrs varnames tensorptrs
    st'
