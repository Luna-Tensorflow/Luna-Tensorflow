import Std.Foreign
import Std.Foreign.C.Value
import Tensorflow.Tensor
import Tensorflow.CWrappers.Tensor

def tensorFromPtr releaseMethod tensorPtr:
    managedTensorPtr = ManagedPointer None . fromPointer releaseMethod tensorPtr

    wrapper = TensorWrapper managedTensorPtr
    Tensor wrapper

class OperationWrapper:
    ptr :: ManagedPointer None
    #typename :: Text # TODO

    def toCArg:
        self.ptr.toCArg

    def eval:
        evalOp = lookupSymbol "TFL" "eval_op_float"
        releaseMethod = lookupSymbol "TFL" "release"
        tensorPtr = evalOp.call (Pointer None) [self.toCArg]
        tensorFromPtr releaseMethod tensorPtr

def batchEval list:
    count = list . length
    batchEvalOp = lookupSymbol "TFL" "batch_eval_op_float"
    releaseMethod = lookupSymbol "TFL" "release"

    carr = ManagedPointer (Pointer None) . mallocElems count
    indexed = 0 . upto count . zip list
    indexed . each (idx, elem):
        carr . moveElems idx . write (elem.ptr.ptr)

    returnedPtr = batchEvalOp.call (Pointer (Pointer None)) [carr.toCArg, (CInt64.fromInt count).toCArg]
    returnedArr = Array (Pointer None) . make count returnedPtr

    retval = returnedArr . toList . map (tensorFromPtr releaseMethod)
    returnedArr . free
    retval


def makeConstWrapper tensor:
    makeOp = lookupSymbol "TFL" ("make_op_const_float")
    releaseMethod = lookupSymbol "TFL" "release"
    op = makeOp.call (Pointer None) [tensor.ptr.toCArg]
    managedOp = ManagedPointer None . fromPointer releaseMethod op
    OperationWrapper managedOp

def makeBinaryOpWrapper name a b:
    makeOp = lookupSymbol "TFL" ("make_op_binary_float")
    releaseMethod = lookupSymbol "TFL" "release"
    op = makeOp.call (Pointer None) [(CString.fromText name).toCArg, a.ptr.toCArg, b.ptr.toCArg]
    managedOp = ManagedPointer None . fromPointer releaseMethod op
    OperationWrapper managedOp

def makePartialDerivativeWrapper a b:
    makeOp = lookupSymbol "TFL" ("make_op_partial_derivative")
    releaseMethod = lookupSymbol "TFL" "release"
    op = makeOp.call (Pointer None) [a.ptr.toCArg, b.ptr.toCArg]
    managedOp = ManagedPointer None . fromPointer releaseMethod op
    OperationWrapper managedOp

