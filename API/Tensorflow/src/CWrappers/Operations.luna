import Std.Foreign
import Std.Foreign.C.Value
import Tensorflow.Tensor
import Tensorflow.Operations
import Tensorflow.CWrappers.Tensor
import Tensorflow.Types

import Tensorflow.CWrappers.Helpers

def unzip listpair: case listpair of
    Empty: (Empty, Empty)
    Prepend (x,y) tail: case unzip tail of
        (tailx, taily): ((Prepend x tailx), (Prepend y taily))


class OutputWrapper a:
    ptr :: ManagedPointer None
    typetag :: a

    def toCArg:
        self.ptr.toCArg

    def eval:
        tensorPtr = callHandlingError "eval_op" (Pointer None) [self.toCArg]
        Tensors.fromPtr self.typetag tensorPtr

    def opName:
        cstr = callHandlingError "get_operation_name" CString [self.toCArg]
        name = cstr.toText
        name

def batchEval list:
    batchEvalSubstitutions list []

def batchEvalSubstitutions list substitutions:
    list' = list.each id
    count = list' . length
    phCount = substitutions . length

    carr = Pointer (Pointer None) . mallocElems count
    indexed = 0 . upto (count - 1) . zip list'
    indexed . each (idx, elem):
        carr . moveElems idx . write (elem.ptr.ptr)

    (names, substs) = unzip substitutions
    substs' = substs.each id

    subsNameArr = Pointer CString . mallocElems phCount
    indexed = 0 . upto (phCount - 1) . zip names
    indexed . each (idx, elem):
        subsNameArr . moveElems idx . write (CString . fromText elem)


    substsArr = Pointer (Pointer None) . mallocElems phCount
    indexed = 0 . upto (phCount - 1) . zip substs'
    indexed . each (idx, elem):
        substsArr . moveElems idx . write (elem.ptr.ptr)

    returnedPtr = callHandlingError "batch_eval_op_placeholders" (Pointer (Pointer None)) [carr.toCArg, (CInt64.fromInt count).toCArg,
            subsNameArr.toCArg, substsArr.toCArg, (CInt64.fromInt phCount).toCArg]

    returnedArr = Array (Pointer None) . make count returnedPtr

    retval = returnedArr . toList . each (tensorFromPtr FloatType) # TODO: different types support

    callHandlingError "free_pointer" None [returnedPtr.toCArg]

    0.upto (phCount - 1) . each (idx: subsNameArr . moveElems idx . read . free)
    subsNameArr.free
    substsArr.free
    carr.free

    retval

def makeConstWrapper tensor:
    tensor' = tensor
    out = callHandlingError "make_op_const" (Pointer None) [tensor'.ptr.toCArg]
    managedOut = ManagedPointer None . fromPointer releaseMethod out
    OutputWrapper managedOut tensor'.wrapper.typetag

def makePlaceholderWrapper typetag name:
    out = CString.with name nameCStr:
            callHandlingError "make_op_placeholder" (Pointer None) [nameCStr.toCArg, CInt32.fromInt typetag.num . toCArg]

    managedOut = ManagedPointer None . fromPointer releaseMethod out

    OutputWrapper managedOut typetag

def makeBinaryOpWrapper name a b:
    None # TODO: add assert a.typetag == b.typetag
    a' = a
    b' = b
    out = CString.with name nameCStr:
            callHandlingError "make_op_binary" (Pointer None) [nameCStr.toCArg, a'.ptr.toCArg, b'.ptr.toCArg]

    managedOut = ManagedPointer None . fromPointer releaseMethod out

    OutputWrapper managedOut a'.typetag

def makeUnaryOpWrapper name a:
    a' = a

    out = CString.with name nameCStr:
            callHandlingError "make_op_unary" (Pointer None) [nameCStr.toCArg, a'.ptr.toCArg]

    managedOut = ManagedPointer None . fromPointer releaseMethod out

    OutputWrapper managedOut a'.typetag

def makePartialDerivativeWrapper a b:
    a' = a
    b' = b
    out = callHandlingError "make_op_partial_derivative" (Pointer None) [a'.ptr.toCArg, b'.ptr.toCArg]
    managedOut = ManagedPointer None . fromPointer releaseMethod out
    OutputWrapper managedOut a'.typetag

def outputWrapperFromPtr typetag ptr:
    managedOutputPtr = ManagedPointer None . fromPointer releaseMethod ptr
    OutputWrapper managedOutputPtr typetag


def makeOutputWrappers name inputs outputTypetags attrList chosenName:
    inputs' = inputs.each id
    attrList' = attrList
    noutputs = outputTypetags.length

    count = inputs'.length
    inputsCArr = Pointer (Pointer None) . mallocElems count
    indexed = 0 . upto (count - 1) . zip inputs'
    indexed . each (idx, input):
        inputsCArr . moveElems idx . write input.ptr.ptr

    outsPtr = CString.with name nameCStr: CString.with chosenName chosenNameCStr:
            callHandlingError "make_op" (Pointer (Pointer None)) [nameCStr.toCArg, inputsCArr.toCArg, CInt32.fromInt inputs'.length . toCArg, CInt32.fromInt noutputs . toCArg, attrList'.toCArg, chosenNameCStr.toCArg]

    outsArr = Array (Pointer None) . make noutputs outsPtr
    typedOuts = outputTypetags.zip outsArr.toList
    outs = typedOuts.each (typetag, output): outputWrapperFromPtr typetag output

    inputsCArr.free

    callHandlingError "free_pointer" None [outsPtr.toCArg]

    outs
