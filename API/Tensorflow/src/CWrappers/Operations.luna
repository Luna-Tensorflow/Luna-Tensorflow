import Std.Foreign
import Std.Foreign.C.Value
import Tensorflow.Tensor
import Tensorflow.Operations
import Tensorflow.CWrappers.Tensor

def unzip listpair: case listpair of
    Empty: (Empty, Empty)
    Prepend (x,y) tail: case unzip tail of
        (tailx, taily): ((Prepend x tailx), (Prepend y taily))


class OperationWrapper:
    ptr :: ManagedPointer None
    #typename :: Text # TODO

    def toCArg:
        self.ptr.toCArg

    def eval:
        evalOp = lookupSymbol "TFL" "eval_op_float"
        releaseMethod = lookupSymbol "TFL" "release"
        tensorPtr = evalOp.call (Pointer None) [self.toCArg]
        tensorFromPtr releaseMethod tensorPtr

def batchEval list:
    batchEvalSubstitutions list []

def batchEvalSubstitutions list substitutions:
    count = list . length
    phCount = substitutions . length

    batchEvalOp = lookupSymbol "TFL" "batch_eval_op_placeholders_float"
    releaseMethod = lookupSymbol "TFL" "release"

    carr = ManagedPointer (Pointer None) . mallocElems count
    indexed = 0 . upto count . zip list
    indexed . each (idx, elem):
        carr . moveElems idx . write (elem.ptr.ptr)

    (names, substs) = unzip substitutions

    subsNameArr = ManagedPointer CString . mallocElems phCount
    indexed = 0 . upto phCount . zip names
    indexed . each (idx, elem):
        subsNameArr . moveElems idx . write (CString . fromText elem)


    substsArr = ManagedPointer (Pointer None) . mallocElems phCount
    indexed = 0 . upto phCount . zip substs
    indexed . each (idx, elem):
        substsArr . moveElems idx . write (elem.ptr.ptr)

    returnedPtr = batchEvalOp.call (Pointer (Pointer None)) [carr.toCArg, (CInt64.fromInt count).toCArg,
            subsNameArr.toCArg, substsArr.toCArg, (CInt64.fromInt phCount).toCArg]

    returnedArr = Array (Pointer None) . make count returnedPtr

    retval = returnedArr . toList . each (tensorFromPtr releaseMethod)
    returnedArr . free
    retval

def makeConstWrapper tensor:
    makeOp = lookupSymbol "TFL" ("make_op_const_float")
    releaseMethod = lookupSymbol "TFL" "release"
    op = makeOp.call (Pointer None) [tensor.ptr.toCArg]
    managedOp = ManagedPointer None . fromPointer releaseMethod op
    OperationWrapper managedOp

def makePlaceholderWrapper name:
    makeOp = lookupSymbol "TFL" ("make_op_placeholder_float")
    releaseMethod = lookupSymbol "TFL" "release"
    op = makeOp.call (Pointer None) [(CString.fromText name).toCArg]
    managedOp = ManagedPointer None . fromPointer releaseMethod op
    OperationWrapper managedOp

def makeBinaryOpWrapper name a b:
    makeOp = lookupSymbol "TFL" ("make_op_binary_float")
    releaseMethod = lookupSymbol "TFL" "release"
    op = makeOp.call (Pointer None) [(CString.fromText name).toCArg, a.ptr.toCArg, b.ptr.toCArg]
    managedOp = ManagedPointer None . fromPointer releaseMethod op
    OperationWrapper managedOp

def makeUnaryOpWrapper name a:
    makeOp = lookupSymbol "TFL" ("make_op_unary_float")
    releaseMethod = lookupSymbol "TFL" "release"
    op = makeOp.call (Pointer None) [(CString.fromText name).toCArg, a.ptr.toCArg]
    managedOp = ManagedPointer None . fromPointer releaseMethod op
    OperationWrapper managedOp

def makePartialDerivativeWrapper a b:
    makeOp = lookupSymbol "TFL" ("make_op_partial_derivative")
    releaseMethod = lookupSymbol "TFL" "release"
    op = makeOp.call (Pointer None) [a.ptr.toCArg, b.ptr.toCArg]
    managedOp = ManagedPointer None . fromPointer releaseMethod op
    OperationWrapper managedOp

