import Tensorflow.CWrappers.Operations
import Tensorflow.Tensor
import Tensorflow.Types
import Std.Foreign.C.Value

# not sure if we want separate classes for each op type or one class for all?
class TFOutput:
    wrapper :: OutputWrapper

    # ptr :: ManagedPointer None
    def ptr:
        self.wrapper.ptr

    # eval :: Tensor a
    def eval:
        self.wrapper.eval

    # toJSON :: JSON
    def toJSON:
        self.eval.toJSON

    # + :: TFOutput a -> TFOutput a
    def + other:
        add self other

    # * :: TFOutput a -> TFOutput a
    def * other:
        mul self other

    # - :: TFOutput a -> TFOutput a
    def - other:
        sub self other

    # toText :: Text
    def toText:
        "Operation TODO" # TODO

    # not sure if this is pretty to stay, but for now it's very useful
    def typetag:
        self.wrapper.typetag

# makePlaceholder :: TypeTag -> Text -> TFOutput a
def makePlaceholder typetag name:
    wrapper = makePlaceholderWrapper typetag name
    TFOutput wrapper

# makeConst :: Tensor a -> TFOutput a
def makeConst tensor:
    wrapper = makeConstWrapper tensor
    TFOutput wrapper

# constFromList :: TypeTag a -> List a -> Tensor a
def constFromList typetag list:
    tensor = tensorFromList1d typetag list
    makeConst tensor

# constFromScalar :: a -> Tensor a
def constFromScalar typetag x:
    constFromList typetag [x]

# add :: (TFOutput a -> TFOutput a) -> TFOutput a
def add a b:
    wrapper = makeBinaryOpWrapper "Add" a.wrapper b.wrapper
    TFOutput wrapper

# mul :: (TFOutput a -> TFOutput a) -> TFOutput a
def mul a b:
    wrapper = makeBinaryOpWrapper "Mul" a.wrapper b.wrapper
    TFOutput wrapper

# sub :: (TFOutput a -> TFOutput a) -> TFOutput a
def sub a b:
    wrapper = makeBinaryOpWrapper "Sub" a.wrapper b.wrapper
    TFOutput wrapper

# partial :: (TFOutput a -> TFOutput a) -> TFOutput a
def partial a b:
    wrapper = makePartialDerivativeWrapper a.wrapper b.wrapper
    TFOutput wrapper

# matMul :: (TFOutput a -> TFOutput a) -> TFOutput a
def matMul a b:
    wrapper = makeBinaryOpWrapper "MatMul" a.wrapper b.wrapper
    TFOutput wrapper

# matMul :: (TFOutput a -> TFOutput a) -> TFOutput a
def equal a b:
    wrapper = makeBinaryOpWrapper "Equal" a.wrapper b.wrapper
    TFOutput wrapper

# sqnorm :: TFOutput a -> TFOutput a
def sqnorm a:
    mult = mul a a
    dim = constFromScalar Int32Type 1

    wrapper = makeBinaryOpWrapper "Sum" mult.wrapper dim.wrapper
    TFOutput wrapper

# tanh :: TFOutput a -> TFOutput a
def tanh a:
    wrapper = makeUnaryOpWrapper "Tanh" a.wrapper
    TFOutput wrapper

# sigmoid :: TFOutput a -> TFOutput a
def sigmoid a:
    wrapper = makeUnaryOpWrapper "Sigmoid" a.wrapper
    TFOutput wrapper

# sign :: TFOutput a -> TFOutput a
def sign a:
    wrapper = makeUnaryOpWrapper "Sign" a.wrapper
    TFOutput wrapper

def outputFromPtr typetag ptr:
    wrapper = outputWrapperFromPtr typetag ptr
    TFOutput wrapper

def qr a:
    wrappers = makeOutputWrappers "Qr" [a] 2 nullPtr ""
    wrappers.each (wrapper: TFOutput wrapper)
