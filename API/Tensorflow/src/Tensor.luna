import Tensorflow.CWrappers.Tensor

import Std.Foreign
import Std.Foreign.C.Value

# For now we assume tensors are 1D
# Tensor T
class Tensor a:
    wrapper :: TensorWrapper a

    # ptr :: ManagedPointer None
    def ptr:
        self.wrapper.ptr

    # dims :: List Int
    def dims:
        self.wrapper.dims

    # at :: List Int -> T
    def at indices:
        self.wrapper.at indices

    # atIndex :: Int -> T
    def atIndex index:
        self.wrapper.atIndex index

    # toList :: List Real
    def toList:
        indices = 0.upto (self.dims.foldLeft 1 (x: a: a * x) - 1)
        indices.each self.atIndex

    # toJSON :: JSON
    def toJSON:
        self.toList.toJSON

    # toText :: Text
    def toText:
        "Tensor " + (self.dims.toText)


# tensorFromPtr :: TypeTag a -> Pointer None -> Tensor a
def tensorFromPtr typetag tensorPtr:
    releaseMethod = lookupSymbol "TFL" "release"
    managedTensorPtr = ManagedPointer None . fromPointer releaseMethod tensorPtr

    wrapper = TensorWrapper managedTensorPtr typetag
    Tensor wrapper

# tensorFromList1d :: TypeTag a -> List a -> Tensor a
def tensorFromList1d typetag list:
    wrapper = createTensorWrapper typetag [list.length] list
    Tensor wrapper

# tensorFromList :: TypeTag a -> List Int -> List a -> Tensor a
def tensorFromList typetag dims list:
    wrapper = createTensorWrapper typetag dims list
    Tensor wrapper