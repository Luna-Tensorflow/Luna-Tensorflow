import Tensorflow.Graph
import Tensorflow.Operations
import Tensorflow.CFunctions.Model
import Std.Foreign
import Std.Foreign.C.Value

class Model a layerT:
      evalgraph :: TFGraph a
      traingraph :: TFGraph a
      vars :: List (TFOutput ErasedType)
      state :: State
      outLayer :: layerT
      # outLayer is only used for toJSON so might be removed if we change that

      # Returns Model in JSON type.
      # `return` :: JSON
      # toJSON :: JSON
      def toJSON:
          self.outLayer.toJSON

      # Predicts model's output on given input.
      # Arguments: 
      # x :: Tensor a
      # `return` :: Tensor b
      # evaluate :: Tensor a -> Tensor b
      def evaluate x:
          (res, state') = self.evalgraph.evalSubsts self.state [("x", x)]
          res

      # Trains model on given inputs and outputs. Returns loss history and the trained model.
      # Arguments: 
      # `xs` :: List Tensor a
      # `ys` :: List Tensor b
      # `epochs` :: Int
      # `validation` :: Validation a b
      # `earlyStop`:: Int
      # `return` :: Model
      # train :: List Tensor a -> List Tensor b -> Int -> Validation a b -> Int -> (List Real, Model) # TODO also consider real time visualization of loss in GUI
      def train xs ys epochs validation earlyStop:
          separateValidationVals = case validation of
              NoValidation: []
              ValidationFraction _: []
              ValidationSet vxs vys: vxs.zipWith (x: y: [x, y]) vys

          placeholderNames = ["x","y"]
          placeholderVals = separateValidationVals + (xs.zipWith (x: y: [x,y]) ys)

          validationSamples = case validation of
              NoValidation: 0
              ValidationFraction p: (p * xs.length.toReal) . round 0 . floor
              ValidationSet vxs _: vxs.length

          ModelFunctions.train self placeholderNames placeholderVals epochs validationSamples earlyStop

      # Saving trained model's weights into file.
      # `filename` :: Text
      # `return` :: ()
      # saveWeights :: Text -> ()
      def saveWeights filename:
          StateOps.saveVariables filename self.vars self.state

      # Loading saved model's weights from file.
      # `filename` :: Text
      # `return` :: Model
      # loadWeights :: Text -> Model
      def loadWeights filename:
          state' = StateOps.loadVariables filename self.vars StateOps.makeEmpty
          Model self.evalgraph self.traingraph self.vars state' self.outLayer

# Model building methods.
class Models:
    Models

    # Creates model with given data and parameters.
    # Arguments: 
    # `input` :: List Tensor
    # `output` :: List Tensor
    # `optimizer` :: TF_Optimizer
    # `loss` :: (TFOutput -> TFOutput)
    # `return` :: Model
    # make :: List Tensor -> List Tensor -> TF_Optimizer -> (TFOutput -> TFOutput) -> Model 
    def make input output optimizer loss:
        inputPlaceholder = Operations.makePlaceholder input.typetag "x"
        yPredTrain = output.forward inputPlaceholder
        yPredEval = output.eval inputPlaceholder
        outType = yPredEval.typetag

        yTruePlaceholder = Operations.makePlaceholder outType "y"

        evalgraph = TFGraphMaker.makeFromOutput yPredEval

        variables = output.trainableVariables
        traingraph = optimizer.makeOptimizingGraph yTruePlaceholder yPredTrain loss variables

        initialState = StateOps.makeEmpty # TODO state initialization by layers

        Model evalgraph traingraph variables initialState output


class Validation a b:
    NoValidation
    ValidationFraction Real
    ValidationSet (List (Tensor a)) (List (Tensor b))
