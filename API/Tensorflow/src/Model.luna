import Tensorflow.Graph
import Tensorflow.Operations

# TODO add state type once it's implemented
class Model stateT:
      evalgraph :: TFGraph
      traingraph :: TFGraph
      state :: stateT # TODO

      # evaluate :: Tensor a -> Tensor b
      def evaluate x:
          self.evalgraph.evalSubsts [("x", x)] # TODO state

      # train :: Model # TODO also consider real time visualization of loss in GUI
      def train x y:
          self.traingraph.evalSubsts [("x", x), ("y", y)]
          newstate = self.state # TODO update state
          Model self.evalgraph self.traingraph newstate


def makeModel input output optimizer loss:
    inputPlaceholder = makePlaceholder input.typetag "x"
    yPred = output.forward inputPlaceholder
    outType = yPred.typetag

    yTruePlaceholder = makePlaceholder outType "y"

    evalgraph = makeGraphFromOutput yPred

    variables = output.trainableVariables
    traingraph = optimizer.makeOptimizingGraph yTruePlaceholder yPred loss variables

    Model evalgraph traingraph [] # TODO
