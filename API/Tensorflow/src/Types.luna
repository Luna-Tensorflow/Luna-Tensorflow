import Std.Foreign.C.Value
import Std.Foreign

import Tensorflow.CWrappers.Helpers

class TypeTagHelper:
    # Converts a normal typetag into an erased version.
    #
    # eraseTypeTag :: a -> ErasedType
    def eraseType typetag:
        ErasedType typetag.typename typetag.num

    # Checks whether two typetags are referring to the same type. May be used to check if some instance of a dynamic TypeTag is convertible to some concrete typetag.
    #
    # isTypeTagInstanceOf :: a -> b -> Bool
    def isTypeTagInstanceOf t1 t2:
        t1.num == t2.num

class ErasedType:
    typename :: Text
    num :: Int

    def toText:
        "Erased(" + self.typename + ")"
    def ctype:
        throw "Erased types cannot be converted from/to actual values. To do so you have to manually cast to a concrete type (caused by .ctype)"
    def fromC val:
        throw "Erased types cannot be converted from/to actual values. To do so you have to manually cast to a concrete type (caused by .fromC)"
    def toC val:
        throw "Erased types cannot be converted from/to actual values. To do so you have to manually cast to a concrete type (caused by .toC)"
    def cleanupLuna val:
        throw "Erased types cannot be converted from/to actual values. To do so you have to manually cast to a concrete type (caused by .cleanupLuna)"
    def cleanupC val:
        throw "Erased types cannot be converted from/to actual values. To do so you have to manually cast to a concrete type (caused by .cleanupC)"
    def fromReal x:
        throw "Erased types cannot be converted from/to actual values. To do so you have to manually cast to a concrete type (caused by .fromReal)"

class FloatType:
    def typename:
        "TF_FLOAT"
    def ctype:
        CFloat
    def fromC val:
        val.toReal
    def toC val:
        CFloat.fromReal val
    def cleanupLuna val:
        None
    def cleanupC val:
        None
    def num:
        1
    def toText:
        self.typename
    def fromReal x:
        x

class DoubleType:
    def typename:
        "TF_DOUBLE"
    def ctype:
        CDouble
    def fromC val:
        val.toReal
    def toC val:
        CDouble.fromReal val
    def cleanupLuna val:
        None
    def cleanupC val:
        None
    def num:
        2
    def toText:
        self.typename
    def fromReal x:
        x

class Int8Type:
    def typename:
        "TF_INT8"
    def ctype:
        CInt8
    def fromC val:
        val.toInt
    def toC val:
        CInt8.fromInt val
    def cleanupLuna val:
        None
    def cleanupC val:
        None
    def num:
        6
    def toText:
        self.typename
    def fromReal x:
        x.floor

class Int16Type:
    def typename:
        "TF_INT16"
    def ctype:
        CInt16
    def fromC val:
        val.toInt
    def toC val:
        CInt16.fromInt val
    def cleanupLuna val:
        None
    def cleanupC val:
        None
    def num:
        5
    def toText:
        self.typename
    def fromReal x:
        x.floor

class Int32Type:
    def typename:
        "TF_INT32"
    def ctype:
        CInt32
    def fromC val:
        val.toInt
    def toC val:
        CInt32.fromInt val
    def cleanupLuna val:
        None
    def cleanupC val:
        None
    def num:
        3
    def toText:
        self.typename
    def fromReal x:
        x.floor

class Int64Type:
    def typename:
        "TF_INT64"
    def ctype:
        CInt64
    def fromC val:
        val.toInt
    def toC val:
        CInt64.fromInt val
    def cleanupLuna val:
        None
    def cleanupC val:
        None
    def num:
        9
    def toText:
        self.typename
    def fromReal x:
        x.floor

class UInt8Type:
    def typename:
        "TF_UINT8"
    def ctype:
        CUInt8
    def fromC val:
        val.toInt
    def toC val:
        CUInt8.fromInt val
    def cleanupLuna val:
        None
    def cleanupC val:
        None
    def num:
        4
    def toText:
        self.typename
    def fromReal x:
        x.floor

class UInt16Type:
    def typename:
        "TF_UINT16"
    def ctype:
        CUInt16
    def fromC val:
        val.toInt
    def toC val:
        CUInt16.fromInt val
    def cleanupLuna val:
        None
    def cleanupC val:
        None
    def num:
        17
    def toText:
        self.typename
    def fromReal x:
        x.floor

class UInt32Type:
    def typename:
        "TF_UINT32"
    def ctype:
        CUInt32
    def fromC val:
        val.toInt
    def toC val:
        CUInt32.fromInt val
    def cleanupLuna val:
        None
    def cleanupC val:
        None
    def num:
        22
    def toText:
        self.typename
    def fromReal x:
        x.floor

class UInt64Type:
    def typename:
        "TF_INT64"
    def ctype:
        CUInt64
    def fromC val:
        val.toInt
    def toC val:
        CUInt64.fromInt val
    def cleanupLuna val:
        None
    def cleanupC val:
        None
    def num:
        23
    def toText:
        self.typename
    def fromReal x:
        x.floor

class BoolType:
    def typename:
        "TF_BOOL"
    def ctype:
        CUInt8
    def fromC val:
        (val.toInt == 0).not
    def toC val:
        case val of
            True: CUInt8.fromInt 1
            False: CUInt8.fromInt 0
    def cleanupLuna val:
        None
    def cleanupC val:
        None
    def num:
        10
    def toText:
        self.typename
    def fromReal x:
        if x > 0 then True else False

class StringType:
    def typename:
        "TF_STRING"
    def ctype:
        CString
    def fromC val:
        val.toText
    def toC val:
        CString.fromText val
    def cleanupLuna val:
        val.free
    def cleanupC val:
        val' = val
        callHandlingError "free_pointer" None [val'.toCArg]
    def num:
        7
    def toText:
        self.typename
    def fromReal x:
        x.toText
