import Tensorflow.CWrappers.Graph
import Tensorflow.CWrappers.State
import Tensorflow.Operations

class State:
    wrapper :: StateWrapper

    def values names:
        wrappers = self.wrapper.values names
        wrappers . each(x: Tensor x)

    def value name:
        wrapper = self.wrapper.value name
        Tensor wrapper

    def updateOne name value:
        wrapper = self.wrapper.updateOne name value
        Tensor wrapper

    def update values:
        wrapper = self.wrappers.update values
        State wrapper


# makeEmptyState :: State
def makeEmptyState:
    wrapper = emptyState
    State wrapper

# alterState :: State -> List Tuple2 Text Tensor -> State
def alterState state values:
    newstate = state . update values
    newstate

# setVarInState :: State -> Text -> Tensor -> State
def setVarInState state varname value:
    newstate = state . updateOne varname value
    newstate

class TFGraph:
    wrapper :: GraphWrapper
    outputs :: List (Operation)

    # ptr :: ManagedPointer None
    def ptr:
        self.wrapper.ptr

    # eval :: State -> (List Tensor a, State)
    def eval state:
        self.evalSubsts state []

    # evalSubsts :: State -> List Tuple2 Text (Tensor a) -> (List Tensor a, State)
    def evalSubsts state substs:
        (self.wrapper.evalSubsts self.outputs.length substs, makeEmptyState) # TODO implement State

    # toJSON :: JSON
    def toJSON:
        self.eval.toJSON

# makeGraphFromOutputList :: List TFOutput -> TFGraph
def makeGraphFromOutputList outputList:
    wrapper = makeGraphWrapperFromOutputList outputList
    TFGraph wrapper outputList

# makeGraphFromOutput :: TFOutput-> TFGraph
def makeGraphFromOutput output:
    makeGraphFromOutputList [output]
