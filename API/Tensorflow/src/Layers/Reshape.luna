import Tensorflow.Tensor
import Tensorflow.Types
import Tensorflow.Operations
import Tensorflow.Variables
import Tensorflow.Layers.Activation
import Tensorflow.CWrappers.Helpers

class ReshapeLayer layerT:
      name :: Text
      resultDims :: List Int
      parentLayer :: layerT # :: Layer

      # shape :: List Int
      def shape:
          resultDims

      # forward :: Operation a -> Operation a
      def forward inp:
          myin = self.parentLayer.forward inp
          reshaped = reshapeOp myin self.resultDims
          reshaped


      # trainableVariables :: List Variable a
      def trainableVariables:
          self.parentLayer.trainableVariables

      def outputType:
          self.parentLayer.outputType

# reshape :: List Int -> Layer -> Layer
def reshape newdims parent:
    nNegOnes = newdims . filter (e: e == -1) . length
    if nNegOnes > 1 then throw $ "There can be at most one -1 in Reshape!" else
        name = getNextName "Reshape"
        if nNegOnes == 0 then (ReshapeLayer name newdims parent) else
            parentLength = parent.shape.fold 1 (*)
            remaining = newdims . filter (e: (e == -1).not) . fold 1 (*)
            if ((parentLength % remaining) == 0).not then throw $ "Illegal reshape shapes!" else
                unknownDim = parentLength / remaining
                ndims = newdims . map (e: if e == -1 then unknownDim else e)
                r = ReshapeLayer name ndims parent
                r


# flatten :: Layer -> Layer
def flatten parent:
    r = reshape [-1] parent
    r