import Tensorflow.Tensor
import Tensorflow.Types
import Tensorflow.Operations
import Tensorflow.Variables
import Tensorflow.Layers.LayersHelper
import Tensorflow.CWrappers.Helpers

class AddLayer layerA layerB:
      name :: Text
      parentLayerA :: layerA # :: Layer
      parentLayerB :: layerB # :: Layer

      def toText:
          self.name + self.shape.toText

      def toJSON:
          name = self.name
          shape = self.shape
          parents = [self.parentLayerA, self.parentLayerB]
          type = "Add"
          JSON.empty . insert "name" name . insert "shape" shape . insert "parents" parents . insert "type" type

      # shape :: List Int
      def shape:
          self.parentLayerA . shape

      # forward :: Operation a -> Operation a
      def forward inp:
          inA = self.parentLayerA . forward inp
          inB = self.parentLayerB . forward inp
          result = Operations.add inA inB
          result

      # eval :: Operation a -> Operation a
      def eval inp:
          inA = self.parentLayerA . eval inp
          inB = self.parentLayerB . eval inp
          result = Operations.add inA inB
          result

      # trainableVariables :: List Variable a
      def trainableVariables:
          vars = self.parentLayerA.trainableVariables + self.parentLayerB.trainableVariables
          unique = LayersHelper.uniqueVariables vars
          unique

      def outputType:
          self.parentLayerA . outputType

class Marge:
      Merge

      def add layerA layerB:
        case layerA.shape == layerB.shape of
          False: throw ("Shape mismatch " + layerA.shape.toText + " /= " + layerB.shape.toText)
          True:
            case layerA.outputType.typename == layerB.outputType.typename of
              False: throw ("Output type mismatch " + layerA.outputType.toText + " /= " + layerB.outputType.toText)
              True:
                name = getNextName "Add"
                AddLayer name layerA layerB
