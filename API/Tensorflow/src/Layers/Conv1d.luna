import Tensorflow.Tensor
import Tensorflow.Types
import Tensorflow.Operations
import Tensorflow.Variables
import Tensorflow.Layers.Activation
import Tensorflow.Layers.Conv2d
import Tensorflow.Layers.Reshape
import Tensorflow.CWrappers.Helpers
import Tensorflow.Padding

# Conv1d layer creation and usage. This layer creates internally a 1D convolution kernel of given parameters that is cross-correlated with the previous layer (of shape 2D - specified input channes, or 1D - unspecified input channels) and using this kernel computes 2D output (with given number of channels and padding algorithm type) for next layer. It internally reshapes the input and invokes Conv2d.
class Conv1d:
    Conv1d

    # Internal.
    def _fitkern size ksize stride:
        ((size - ksize + 1).toReal / (stride.toReal)).ceiling

    # Conv1d layer constructor.
    # Arguments:
    # `kernelW` :: Int
    # `outChannels` :: Int
    # `stride` :: Int
    # `paddingType` :: PaddingType
    # `parent` :: Layer
    # `return` :: Layer
    # create :: Int -> Int -> Int -> PaddingType -> Layer -> Layer
    def create kernelW outChannels stride paddingType parent:
        s = parent.shape

        newShape1 = case s of
            [w]: [1, w, 1]
            [w, c]: [1, w, c]
            _: throw $ "conv1d requires parent layer of shape [width] or [width, channels]"

        reshape1 = Reshape.create newShape1 parent
        conv = Conv2d.create [1, kernelW] outChannels (1, stride) paddingType reshape1
        [convH, convW, _] = conv.shape
        reshape2 = Reshape.create [convH * convW, outChannels] conv
        reshape2

    # Conv1d with activation layer constructor.
    # Arguments:
    # `kernelW` :: Int
    # `outChannels` :: Int
    # `stride` :: Int
    # `paddingType` :: PaddingType
    # `activationFunction` :: TFOutput a -> TFOutput a
    # `parent` :: Layer
    # `return` :: Layer
    # createWithActivation :: Int -> Int -> Int -> PaddingType -> (TFOutput a -> TFOutput a) -> Layer -> Layer
    def createWithActivation kernelW outChannels stride paddingType activationFunction parent:
        c = self.create kernelW outChannels stride paddingType parent
        name = getNextName "Activation"
        a = ActivationLayer name activationFunction c c.outputType
        a