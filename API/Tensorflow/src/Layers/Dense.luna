import Tensorflow.Tensor
import Tensorflow.Types
import Tensorflow.Operations
import Tensorflow.Variables
import Tensorflow.Layers.Activation
import Tensorflow.CWrappers.Helpers

# TODO these type parameters are temporary
class DenseLayer varT layerT:
      name :: Text
      nOutputs :: Int
      weights :: varT # :: Variable a
      biases :: varT # :: Variable a
      parentLayer :: layerT # :: Layer # TODO no interfaces

      def toText:
          self.name + self.shape.toText

      def toJSON:
          name = self.name
          shape = self.shape
          parents = [self.parentLayer]
          type = "Dense"
          JSON.empty . insert "name" name . insert "shape" shape . insert "parents" parents . insert "type" type

      # shape :: List Int
      def shape:
          [self.nOutputs, 1]

      # forward :: Operation a -> Operation a
      def forward inp:
          in = self.parentLayer.forward inp
          prod = Operations.matMul self.weights in
          result = Operations.add prod self.biases
          result

      # eval :: Operation a -> Operation a
      def eval inp:
          in = self.parentLayer.eval inp
          prod = Operations.matMul self.weights in
          result = Operations.add prod self.biases
          result

      # trainableVariables :: List Variable a
      def trainableVariables:
          [self.weights, self.biases] + self.parentLayer.trainableVariables

      def outputType:
          self.parentLayer.outputType

class Dense:
    Dense

    # create :: Int -> Layer -> Layer
    def create nOutputs parent:
        nInputs = case parent.shape of
            [x, 1]: x
            _: throw $ "Dense layer requires its input to be a flat tensor n x 1"

        vartype = parent.outputType

        name = getNextName "Dense"

        winit = Tensors.random vartype [nOutputs, nInputs] 0.0 1.0
        binit = Tensors.random vartype [nOutputs, 1] 0.0 1.0
        w = Variables.make (name + "w") winit  # TODO defaultValue, TODO name scope to layer - need a mechanism for prefixes
        b = Variables.make (name + "b") binit # TODO j.w.

        d = DenseLayer name nOutputs w b parent
        d

    # createWithActivation :: Int -> (Operation a -> Operation a) -> Layer -> Layer
    def createWithActivation nOutputs activationFunction parent:
        d = self.create nOutputs parent
        name = getNextName "Activation"
        a = ActivationLayer name activationFunction d
        a
