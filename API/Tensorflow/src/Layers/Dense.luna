import Tensorflow.Tensor
import Tensorflow.Types
import Tensorflow.Operations
import Tensorflow.Variables
import Tensorflow.Layers.Activation
import Tensorflow.CWrappers.Helpers


# This layer implements the operation: outputs = inputs * kernel + bias where kernel is a weights matrix created by the layer, and bias is a bias vector created by the layer.
class DenseLayer a layerT:
      name :: Text
      nOutputs :: Int
      weights :: TFOutput a
      biases :: TFOutput a
      outputType :: a
      parentLayer :: layerT

      # Returns Dense layer in Text type.
      # `return` :: Text
      # toText :: Text
      def toText:
          self.name + self.shape.toText

      # Returns Dropout layer in JSON type.
      # `return` :: JSON
      # toJSON :: JSON
      def toJSON:
          name = self.name
          shape = self.shape
          parents = [self.parentLayer]
          type = "Dense"
          JSON.empty . insert "name" name . insert "shape" shape . insert "parents" parents . insert "type" type

      # Returns shape after processing by this layer.
      # `return` :: List Int
      # shape :: List Int
      def shape:
          [self.nOutputs, 1]

      # Computes output on this layer after feeding with data from previous one.
      # Arguments:
      # `inp` :: TFOutput a
      # `return` :: TFOutput a
      # forward :: TFOutput a -> TFOutput a
      def forward inp:
          in = self.parentLayer.forward inp
          prod = Operations.matMul self.weights in
          result = Operations.add prod self.biases
          result

      # Helper function to run evaluation of model.
      # Arguments:
      # `inp` :: TFOutput a
      # `return` :: TFOutput a
      # eval :: TFOutput a -> TFOutput a
      def eval inp:
          in = self.parentLayer.eval inp
          prod = Operations.matMul self.weights in
          result = Operations.add prod self.biases
          result

      # Returns variables to train, up to this layer.
      # `return` :: List Variable a
      # trainableVariables :: List Variable a
      def trainableVariables:
          [self.weights.eraseType, self.biases.eraseType] + self.parentLayer.trainableVariables

# Dense layer creation and usage.
class Dense:
    Dense

    # Dense layer constructor.
    # Arguments:
    # `nOutputs` :: Int
    # `parent` :: Layer
    # `return` :: Layer
    # create :: Int -> Layer -> Layer
    def create nOutputs parent:
        nInputs = case parent.shape of
            [x, 1]: x
            _: throw $ "Dense layer requires its input to be a flat tensor n x 1"

        vartype = parent.outputType

        name = getNextName "Dense"

        None # TODO in the future we may add a way to initialize layer's default values to other than random
        winit = Tensors.random vartype [nOutputs, nInputs] (vartype.fromReal 0.0) (vartype.fromReal 1.0)
        binit = Tensors.random vartype [nOutputs, 1] (vartype.fromReal 0.0) (vartype.fromReal 1.0)
        w = Variables.make (name + "w") winit
        b = Variables.make (name + "b") binit

        d = DenseLayer name nOutputs w b parent.outputType parent
        d

    # Dense with activation layer function constructor.
    # Arguments:
    # `nOutputs` :: Int
    # `activationFunction` :: TFOutput a -> TFOutput a
    # `parent` :: Layer
    # `return` :: Layer
    # createWithActivation :: Int -> (TFOutput a -> TFOutput a) -> Layer -> Layer
    def createWithActivation nOutputs activationFunction parent:
        d = self.create nOutputs parent
        a = Activation.create activationFunction d
        a
