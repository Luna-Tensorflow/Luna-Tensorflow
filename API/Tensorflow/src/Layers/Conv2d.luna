import Tensorflow.Tensor
import Tensorflow.Types
import Tensorflow.Operations
import Tensorflow.Variables
import Tensorflow.Layers.Activation
import Tensorflow.CWrappers.Helpers

class PaddingType:
    Valid
    Same

    def toText: case (self) of
        Valid: "VALID"
        Same: "SAME"

class Conv2dLayer varT layerT:
    name :: Text
    kernelWeights :: varT
    outHeight :: Int
    outWidth :: Int
    outChannels :: Int
    kernelHeight :: Int
    kernelWidth :: Int
    stride :: Tuple2 Int Int
    paddingType :: PaddingType
    parentLayer :: layerT


    def toText:
        self.name + self.shape.toText + " (TODO more info?)"

    def toJSON:
        self.toText.toJSON

    def shape:
        [self.outHeight, self.outWidth, self.outChannels]

    def calculateConv parentsOutput:
        expanded' = Operations.expandDim parentsOutput 0 # expand batch dim as 1
        expanded = if self.parentLayer.shape.length == 2 then (Operations.expandDim expanded' 1.negate) else expanded' #expand channel dim as 1
        convo = Operations.conv2D expanded self.kernelWeights self.stride self.paddingType
        squeezed = Operations.squeeze convo [0] # squeeze back
        squeezed

    def eval inp:
        in = self.parentLayer.eval inp
        out = self.calculateConv in
        out

    def forward inp:
        in = self.parentLayer.forward inp
        out = self.calculateConv in
        out

    # trainableVariables :: List Variable a
    def trainableVariables:
        Prepend self.kernelWeights self.parentLayer.trainableVariables

    def outputType:
        self.parentLayer.outputType

class Conv2d:
    Conv2d

    def _fitkern size ksize stride:
        ((size - ksize + 1).toReal / (stride.toReal)).ceiling

    #create :: List Int -> Int -> Tuple2 Int Int -> PaddingType -> Layer -> Layer
    def create [kernelHeight, kernelWidth] outChannels (strideY, strideX) paddingType parent:
        [outHeight, outWidth, inChannels] = case parent.shape of
            [h, w]:  case paddingType of
                Valid: [self._fitkern h kernelHeight strideY, self._fitkern w kernelWidth strideX, 1]
                Same: [h, w, 1]
            [h, w, c]: case paddingType of
                Valid: [self._fitkern h kernelHeight strideY, self._fitkern w kernelWidth strideX, c]
                Same:  [h, w, c]
            _: throw $ "conv2d requires parent layer of shape h x w or h x w x c"

        name = getNextName "Conv2D"
        vartype = parent.outputType

        winit = Tensors.random vartype [kernelHeight, kernelWidth, inChannels, outChannels] 0.0 1.0
        w = Variables.make (name + "w") winit

        c = Conv2dLayer name w outHeight outWidth outChannels kernelHeight kernelWidth (strideY, strideX) paddingType parent
        c

    # createWithActivation :: List Int -> Int -> Tuple2 Int -> PaddingType -> (Operation a -> Operation a) -> Layer -> Layer
    def createWithActivation kernelHW outChannels stride paddingType activationFunction parent:
        c = self.create kernelHW outChannels stride paddingType parent
        name = getNextName "Activation"
        a = ActivationLayer name activationFunction c
        a

