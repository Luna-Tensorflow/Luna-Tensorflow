import Tensorflow.Tensor
import Tensorflow.Types
import Tensorflow.Operations
import Tensorflow.CWrappers.Helpers

# This layer implements the operation: output = activation(input)
class ActivationLayer a layerT:
    name :: Text
    activationFunction :: (TFOutput a) -> (TFOutput a)
    parentLayer :: layerT # :: Layer # TODO no interfaces
    outputType :: a # this type is forced in construction to unify activationFunction type

    # Returns Activation layer in Text type.
    # `return` :: Text
    # toText :: Text
    def toText:
        self.name + self.shape.toText

    # Returns Activation layer in JSON type.
    # `return` :: JSON
    # toJSON :: JSON
    def toJSON:
        name = self.name
        shape = self.shape
        parents = [self.parentLayer]
        type = "Activation"
        JSON.empty . insert "name" name . insert "shape" shape . insert "parents" parents . insert "type" type

    # Returns shape after processing by this layer. It inherits parent's shape.
    # `return` :: List Int
    # shape :: List Int
    def shape:
        self.parentLayer.shape

    # Computes output on this layer after feeding with data from previous one.
    # Arguments:
    # `inp` :: TFOutput a
    # `return` :: TFOutput a
    # forward :: TFOutput a -> TFOutput a
    def forward inp:
        myin = self.parentLayer.forward inp
        out = self.activationFunction myin
        out

    # Helper function to run evaluation of model.
    # Arguments:
    # `inp` :: TFOutput a
    # `return` :: TFOutput a
    # eval :: TFOutput a -> TFOutput a
    def eval inp:
        myin = self.parentLayer.eval inp
        out = self.activationFunction myin
        out

    # Returns variables to train, up to this layer. This layer has no new variables and inherits parent's variables.
    # `return` :: List Variable a
    # trainableVariables :: List TFOutputTypeErased
    def trainableVariables:
        self.parentLayer.trainableVariables

    # Returns type of output in this layer.
    # `return` :: TypeTag
    # outputType :: TypeTag
    # def outputType:
    #     self.parentLayer.outputType

class Activation:
      Activation

      # Creates a layer that applies given function to its input and returns the result as output
      # activationFunction :: TFOutput -> TFOutput
      # parent :: Layer
      # `return` :: Layer
      # create :: (TFOutput -> TFOutput) -> Layer -> Layer
      def create activationFunction parent:
          name = getNextName "Activation"
          a = ActivationLayer name activationFunction parent parent.outputType
          a
