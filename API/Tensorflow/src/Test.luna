import Std.Base
import Std.Time

import Tensorflow.Lift
import Tensorflow.Operations
import Tensorflow.Tensor
import Tensorflow.Gradient
import Tensorflow.Types
import Tensorflow.GeneratedOps

def step func (x, y) [a, b]:
    func x y a b

def gradientDescent lr x y a b:
    meanSqErr = (a * x + b - y) * (a * x + b - y)

    [a + (Operations.partial meanSqErr a) * lr, b + (Operations.partial meanSqErr b) * lr]

def testRegression:
    print "Regression"
    xtensors = [-49,-32,46,-12,18,40,24,29,18,24,12,-41,-39,-24,45,30,-6,-27,-20,21,0,25,14,-11,-22,9,46,-7,-37,-34,-18,-7,30,-10,44,11,36,35,19,24,-29,-28,23,-16,13,-1,21,6,-24,20].each (x: Tensors.fromList1d FloatType [x.toReal])
    ytensors = [-623,-416,521,-176,186,448,253,318,180,254,112,-524,-500,-321,505,330,-107,-359,-273,220,-30,267,133,-167,-297,76,519,-117,-475,-444,-252,-119,324,-152,492,101,397,387,192,255,-384,-370,246,-226,123,-45,222,37,-321,209].each (x: Tensors.fromList1d FloatType [x.toReal])

    train = xtensors . zip ytensors

    lifted = lift5 gradientDescent

    zero = Tensors.fromList1d FloatType [0.0]
    lr = Tensors.fromList1d FloatType [(0.0001 . negate)]

    t0 = Time.now
    [a, b] = train . fold [zero, zero] (step (lifted lr))
    t1 = Time.now

    print a.toJSON
    print b.toJSON
    print ("Took " + (t1.diff t0).toText + " ms")
    if ((a.toJSON.toText == "[12.209929466247559]").and $ b.toJSON.toText == "[-0.22048871219158173]").not then throw $ "Regression fail: expected a = [12.209929466247559], b = [-0.22048871219158173], got a = " + a.toJSON.toText + ", b = " + b.toJSON.toText else None
    print "Regression OK"
    print ""
    print ""
    None

def testGradients:
    print "Gradients"
    a = Operations.constFromScalar FloatType 3.0
    b = Operations.constFromScalar FloatType 3.0
    q = Operations.constFromScalar FloatType 2.0
    p = Operations.constFromScalar FloatType 2.0.negate
    c = a * b
    d = c * a
    e = a + b
    gs = Gradients.make [d, e] [a, b] [p, q]
    result = gs.toJSON
    print result
    if (result == [34.0.negate, 16.0.negate].toJSON).not then throw $ "Gradients error: expected [-34,-16], got " + result.toText else None
    print "Gradients OK"
    print ""
    print ""
    None

def testUInt8:
    print "UInt8"
    a = Operations.constFromScalar UInt8Type 250
    b = Operations.constFromScalar UInt8Type 10
    c = Operations.add a b
    print a.toJSON
    print "+"
    print b.toJSON
    print "="
    cVal = c.toJSON
    print cVal
    if (cVal.toText == "4").not then throw $ "UInt8 error: expected 4, got " + cVal.toText else None
    print "UInt8 OK"
    print ""
    print ""

def testBool:
    print "Bool"
    a = Operations.constFromScalar BoolType True
    aVal = a.toJSON
    print aVal
    if (aVal.toText == "true").not then throw $ "Bool error: expected true, got " + aVal.toText else None
    print "Bool OK"
    print ""
    print ""

def testMultidimensionalTensors:
    print "Multidimensional tensors"
    aTensor = Tensors.fromList Int64Type [2, 3] [1, 2, 3, 4, 5, 6]
    aJSON = aTensor.toJSON
    print aJSON
    if (aJSON.toText == "[[1,2,3],[4,5,6]]").not then throw $ "Multidimensional tensor error: expected [[1,2,3],[4,5,6]], got " + aJSON.toText else None

    aTensor12 = aTensor.at [1, 2]
    print aTensor12
    if (aTensor12 == 6).not then throw "Multidimensional tensor error: expected 6, got " + aTensor12.toText else None

    bTensor = Tensors.fromList Int64Type [2, 3] [9, 8, 7, 7, 8, 9]
    bJSON = bTensor.toJSON
    print bJSON
    if (bJSON.toText == "[[9,8,7],[7,8,9]]").not then throw $ "Multidimensional tensor error: expected [[9,8,7],[7,8,9]], got " + bJSON.toText else None

    a = Operations.makeConst aTensor
    b = Operations.makeConst bTensor
    c = a + b
    cVal = c.eval
    print cVal.dims
    if (cVal.dims == [2, 3]).not then throw $ "Multidimensional tensor error: expected [2, 3], got " + cVal.dims.toText else None

    cJSON = cVal.toJSON
    print cJSON
    if (cJSON.toText == "[[10,10,10],[11,13,15]]").not then throw $ "Multidimensional tensor error: expected [[10,10,10],[11,13,15]], got " + cJSON.toText else None

    print "Multidimensional tensor OK"
    print ""
    print ""

def testString:
    print "String"
    a = Operations.constFromScalar StringType "test"
    aJSON = a.toJSON
    print aJSON
    if (aJSON.toText == '"test"').not then throw $ 'String error: expected "test", got "' + aJSON.toText + '"' else None

    b = Operations.add a a
    bJSON = b.toJSON
    print bJSON
    if (bJSON.toText == '"testtest"').not then throw $ 'String error: expected "testtest", got "' + bJSON.toText + '"' else None

    print "String OK"
    print ""
    print ""

def testMultiOutputOp:
    print "MultiOutputOp"
    aTensor = Tensors.fromList FloatType [4, 3] (1.upto 12 . map (x: x.toReal))

    a = Operations.makeConst aTensor

    [q, r] = Operations.qr a
    b = Operations.matMul q r

    bJSON = b.toJSON

    print $ "a = " + a.toJSON.toText
    print $ "q * r = " + bJSON.toText

    expectedbText = '[[0.9999996423721313,1.9999982118606567,2.9999983310699463],[3.999999761581421,4.999999523162842,5.999999523162842],[6.999999523162842,7.999999523162842,9],[10,10.999999046325684,11.999998092651367]]'
    if (bJSON.toText == expectedbText).not then throw $ 'MultiOutputOp error: expected ' + expectedbText + ', got ' + bJSON.toText else None

    print "MultiOutputOp OK"
    print ""
    print ""

def testAttrs:
    print "Attrs"
    aTensor = Tensors.fromList1d FloatType [1.0, 2.0, 3.0]

    a = constGen "testAttrs_a" aTensor FloatType
    aJSON = a.toJSON

    if (aJSON.toText == '[1,2,3]').not then throw $ 'Attrs error: expected [1,2,3], got ' + aJSON.toText else None

    aIdentity = debugIdentityGen "testAttrs_aIdentity" a FloatType "" "InputTensorName" [] False

    aIdentityJSON = aIdentity.toJSON
    if (aIdentityJSON == aJSON).not then throw $ 'Attrs error: expected [1,2,3], got ' + aIdentityJSON.toText else None

    print "Attrs OK"
    print ""
    print ""

def testTensorVis:
    tensor = Tensors.fromList2d FloatType [[0.0, 0.5, 1.0], [0.2, 0.3, 0.6], [0.7, 0.8, 0.9]]
    t2 = Tensors.random FloatType [4,80,80] 0.0 1.0
    t3 = Tensors.random FloatType [20,30,3] 0.0 1.0
    tp = Tensors.fromPng "logo.png"

def testMain:
    testRegression
    testUInt8
    testBool
    testString
    testGradients
    testMultidimensionalTensors
    testMultiOutputOp
    testAttrs
